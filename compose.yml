version: "3.8"

x-timezone-env-var: &timezone-env-var TZ=Etc/UTC

x-common-media-volume: &common-media-volume /media/mediaserver:/media

x-common-download-volume: &common-download-volume /media/mediaserver/MediaShare/Downloads:/downloads

x-common-config: &common-config
  networks:
    - bridge_net_1
  # user: 1000:1000
  profiles:
    - prod
  restart: unless-stopped
  logging:
    driver: "json-file"
    options:
      max-size: 10m
      max-file: "3"

services:
  redis: # Runs on port 6379
    image: redis:alpine
    hostname: authentik-redis
    <<: *common-config
    volumes:
      - ./config/databases/redis/data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 10s
      retries: 5
      timeout: 3s
  redis-insight: # Runs on port 5540
    image: redis/redisinsight:latest
    hostname: redisinsight
    <<: *common-config
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - REDIS_URI=redis://redis:6379
    volumes:
      - ./config/redis-insight:/data
  postgres: # Runs on port 5432
    image: postgres:15
    hostname: postgres
    <<: *common-config
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./config/databases/postgres/data:/var/lib/postgresql/data
      # - ./config/databases/postgres/initdb:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 30s
      timeout: 20s
      retries: 3
  pgadmin: # Runs on port 80
    image: dpage/pgadmin4
    hostname: pgadmin
    <<: *common-config
    user: "$UID:$GID"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@localserver.stream
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    volumes:
      - ./config/pgadmin/data:/var/lib/pgadmin
  authentik-server: # Runs on port 9000 (Web UI) and 9443 (Https Web UI)
    image: ghcr.io/goauthentik/server:latest
    hostname: authentik-server
    <<: *common-config
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: server
    environment:
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgres
      AUTHENTIK_POSTGRESQL__NAME: authentik
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRES_USER}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./config/authentik/media:/media
      - ./config/authentik/templates:/templates
  authentik-worker: # Runs on port 8000 (Worker UI)
    image: ghcr.io/goauthentik/server:latest
    hostname: authentik-worker
    <<: *common-config
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: worker
    environment:
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgres
      AUTHENTIK_POSTGRESQL__NAME: authentik
      AUTHENTIK_POSTGRESQL__USER: ${POSTGRES_USER}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./config/authentik/media:/media
      - ./config/authentik/templates:/templates
  vaultwarden: # Runs on port 80
    image: vaultwarden/server:latest
    hostname: vaultwarden
    <<: *common-config
    volumes:
      - ./config/vaultwarden/data:/data
    environment:
      - ADMIN_TOKEN=${VAULT_ADMIN_TOKEN}
      - WEBSOCKET_ENABLED=true # Enable WebSocket notifications
      - SIGNUPS_ALLOWED=false
  nzbget:
    image: lscr.io/linuxserver/nzbget:latest
    hostname: nzbget
    <<: *common-config
    profiles: ["dev"]
    user: 1000:1000
    environment:
      - *timezone-env-var
      - NZBGET_USER=mediaserver
      - NZBGET_PASS=pass@123
    volumes:
      - ./config/nzbget:/config
      - *common-download-volume
    networks:
      - bridge_net_1
    ports:
      - 7003:6789
  qbittorrent: # Runs on port 8080 (Web UI) and 6881 (Torrent Client)
    image: lscr.io/linuxserver/qbittorrent:latest
    hostname: qbittorrent
    <<: *common-config
    user: 1000:1000
    environment:
      - *timezone-env-var
      - WEBUI_PORT=8080
    volumes:
      - ./config/qbittorrent:/config
      - *common-download-volume
    ports:
      - 8080:8080
      - 6881:6881/tcp
      - 6881:6881/udp
  prowlarr: # Runs on port 9696
    image: linuxserver/prowlarr:latest
    hostname: prowlarr
    <<: *common-config
    user: 1000:1000
    environment:
      - *timezone-env-var
    volumes:
      - ./config/prowlarr:/config
    depends_on:
    #   - nzbget
      - qbittorrent
  radarr: # Runs on port 7878
    image: lscr.io/linuxserver/radarr:latest
    hostname: radarr
    <<: *common-config
    user: 1000:1000
    environment:
      - *timezone-env-var
    volumes:
      - ./config/radarr:/config
      - *common-download-volume
      - *common-media-volume
    depends_on:
      - prowlarr
  sonarr: # Runs on port 8989
    image: lscr.io/linuxserver/sonarr:latest
    hostname: sonarr
    <<: *common-config
    user: 1000:1000
    environment:
      - *timezone-env-var
    volumes:
      - ./config/sonarr:/config
      - *common-download-volume
      - *common-media-volume
    depends_on:
      - prowlarr
  bazarr: # [DEV] Runs on port 6767
    image: lscr.io/linuxserver/bazarr:latest
    hostname: bazarr
    <<: *common-config
    profiles: ["dev"]
    user: 1000:1000
    environment:
      - *timezone-env-var
    volumes:
      - ./config/bazarr:/config
      - *common-download-volume
      - *common-media-volume
    depends_on:
      - radarr
      - sonarr
  lidarr: # Runs on port 8686
    image: lscr.io/linuxserver/lidarr:latest
    hostname: lidarr
    <<: *common-config
    user: 1000:1000
    environment:
      - *timezone-env-var
    volumes:
      - ./config/lidarr:/config
      - *common-download-volume
      - *common-media-volume
    depends_on:
      - prowlarr
  readarr: # Runs on port 8787
    image: lscr.io/linuxserver/readarr:develop
    hostname: readarr
    <<: *common-config
    user: 1000:1000
    environment:
      - *timezone-env-var
    volumes:
      - ./config/readarr:/config
      - *common-download-volume
      - *common-media-volume
    depends_on:
      - prowlarr
  jellyfin: # Runs on port 8096 (HTTP) & 8920 (HTTPS)
    image: lscr.io/linuxserver/jellyfin:latest
    hostname: jellyfin
    <<: *common-config
    environment:
      - *timezone-env-var
    volumes:
      - ./config/jellyfin/config:/config
      - *common-media-volume
    ports:
      - 8000:8096
  jellyseerr: # Runs on port 5055
    image: fallenbagel/jellyseerr:latest
    hostname: jellyseerr
    <<: *common-config
    user: 1000:1000
    environment:
      - *timezone-env-var
    volumes:
      - ./config/jellyseerr:/app/config
    depends_on:
      - jellyfin
      - radarr
      - sonarr
  mealie: # Runs on port 9000 
    image: ghcr.io/mealie-recipes/mealie:v3.0.2
    hostname: mealie
    <<: *common-config
    user: 1000:1000
    environment:
      - *timezone-env-var
      - ALLOW_SIGNUP=false
      - BASE_URL=https://mealie.localserver.stream
      - DB_ENGINE=postgres
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_SERVER=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=mealie
    volumes:
      - ./config/mealie/appdata:/app/data/
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 500M
    ports:
      - 9000:9000
  homarr:
    image: ghcr.io/homarr-labs/homarr:latest
    hostname: homarr
    <<: *common-config
    profiles: ["dev"]
    environment:
      - SECRET_ENCRYPTION_KEY=${HOMARR_ENC_KEY}
    volumes:
      - ./custom_entrypoint.sh/:/data/
      - /var/run/docker.sock:/var/run/docker.sock
      - ./config/homarr/appdata:/appdata
    networks:
      - bridge_net_1
    ports:
      - "8080:7575"
  # the-market-diary:
  #   image: ghcr.io/jitendrasachwani/jitendrasachwani/the-market-diary:latest
  #   hostname: the-market-diary
  #   <<: *common-config
  #   user: 1000:1000
  #   environment:
  #     - DOCKER_REGISTRY_USERNAME=${DOCKER_REGISTRY_USERNAME}
  #     - DOCKER_REGISTRY_PASSWORD=${DOCKER_REGISTRY_PASSWORD}
  #     - *timezone-env-var
  #     - NODE_ENV=production
  #   volumes:
  #     - ../the-market-diary/public/videos:/app/public/videos
  #     - ../the-market-diary/out/bundle:/app/out/bundle
  #   networks:
  #     - bridge_net_1
  #   ports:
  #     - "3000:3000"
  #     - "3001:3001"

  # ALWAYS KEEP THIS AS THE LAST SERVICE IN THE FILE AND ADD ALL DEPENDENCIES IN THE DEPENDS_ON SECTION
  newt:
    image: fosrl/newt:latest
    hostname: newt
    <<: *common-config
    environment:
      - PANGOLIN_ENDPOINT=${NEWT_ENDPOINT}
      - NEWT_ID=${NEWT_ID}
      - NEWT_SECRET=${NEWT_SECRET}
      - LOG_LEVEL=DEBUG
    # TODO: Test all one by one and uncomment
    depends_on:
        - redis-insight
        - pgadmin
        - vaultwarden
        - nzbget
        - qbittorrent
        - prowlarr
        - radarr
        - sonarr
        # - bazarr
        - lidarr
        - readarr
        - jellyseerr
        - jellyfin
        # - mealie
  # DO NOT ADD ANY SERVICES BELOW THE NEWT SERVICE, ADD THEM ABOVE THIS SERVICE IF NEEDED

networks:
  bridge_net_1:
    driver: bridge
    attachable: true
